# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{lib, inputs, config, pkgs, callPackage, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      # ... | You can put other .nix files here so that you don't get your main config too bloated.

      ({pkgs, inputs, ...}:
      {
        environment.systemPackages = [ inputs.listentui.packages.${pkgs.system}.default ]; # An import of a 'custom' package from a flake.
      })
    ];
  
 # Enable the X11 windowing system.
  services = {
    xserver = {
      enable = true;
      desktopManager = {
        runXdgAutostartIfNone = true;
        xterm.enable = false;
      };
      displayManager = {
        lightdm.enable = true;
        sessionCommands = ''
          ${pkgs.xorg.xrdb}/bin/xrdb -merge <${pkgs.writeText "Xresources" '' 
          Xft.dpi: 144
          ''} 
        ''; # Sets the DPI value to one that works best for me. Not the best idea for multi-monitor setups, though.
      };
      windowManager.i3 = {
        enable = true;
        extraPackages = with pkgs; [
          dmenu
          i3lock
        ];
      };  
    };
    displayManager = {
      defaultSession = "none+i3";
    };
  };


  services = {
    udisks2.enable = true;
    accounts-daemon.enable = true;
    upower.enable = config.powerManagement.enable;
    gvfs.enable = true;
    tumbler.enable = true;
  }; # A buncha services I have yoinked from XFCE (same with the three lines below).

  security.polkit.enable = true;
  programs.dconf.enable = true;
  programs.thunar.enable = true;

  
  boot = {
    kernelPackages = pkgs.linuxPackages;

    # Bootloader. Limits max number of VISIBLE configuration entries to 5.
    loader = {
      systemd-boot = {
        enable = true;
        configurationLimit = 5;
      };

      efi.canTouchEfiVariables = true;
    };

    kernelModules = [
      "v4l2loopback" # Virtual camera.
      "snd-aloop"    # Virtual microphone.
    ];
    extraModprobeConfig = ''
      options v4l2loopback devices=1 video_nr=1 card_label="OBS Cam" exclusive_caps=1
      hid_apple fnmode=0  
    ''; # Disable Fn Lock on boot (for external KB) + set up virtual camera.
  };

  environment.pathsToLink = [ "/libexec" ];
  
  # Bluetooth turn-on.
  hardware.bluetooth.enable = true;
  hardware.bluetooth.powerOnBoot = false;

  networking.hostName = "..."; # Define your hostname.
  networking.enableIPv6 = false;
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Amsterdam";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  i18n.supportedLocales = [
    "en_US.UTF-8/UTF-8"
    "ja_JP.UTF-8/UTF-8"
    "nl_NL.UTF-8/UTF-8"  
];

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "nl_NL.UTF-8";
    LC_IDENTIFICATION = "nl_NL.UTF-8";
    LC_MEASUREMENT = "nl_NL.UTF-8";
    LC_MONETARY = "nl_NL.UTF-8";
    LC_NAME = "nl_NL.UTF-8";
    LC_NUMERIC = "nl_NL.UTF-8";
    LC_PAPER = "nl_NL.UTF-8";
    LC_TELEPHONE = "nl_NL.UTF-8";
    LC_TIME = "nl_NL.UTF-8";
  };
  
  i18n.inputMethod = { # Use FCITX5 as the IME. Not the best solution in some games, though.
    enable = true;
    type = "fcitx5";
    fcitx5 = {
      addons = with pkgs; [ fcitx5-mozc fcitx5-gtk ];
      #waylandFrontend = true;
      settings.inputMethod = {
        "Groups/0" = {
          "Name" = "Default";
          "Default Layout" = "us";
          "DefaultIM" = "mozc";
        };
        "Groups/0/Items/0" = {
          "Name" = "keyboard-us";
          "Layout" = null;
        };
        "Groups/0/Items/1" = {
          "Name" = "keyboard-ru";
          "Layout" = null;
        };
        "Groups/0/Items/2" = {
          "Name" = "mozc";
          "Layout" = null;
        };
        "GroupOrder" = {
          "0" = "Default";
        };
      };
    };
  };


  services.logind.lidSwitchExternalPower = "ignore"; # Don't sleep on closing lid.
  services.printing.enable = true;
  services.gnome.gnome-keyring.enable = true;
  security.pam.services.lightdm.enableGnomeKeyring = true;

  # Enable sound with pipewire.
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Define a user account. Replace 'username' with your one.
  users.users.username = {
    isNormalUser = true;
    description = "Your username.";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      # Could put user packages here, but not needed if you use home-manager.
    ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Enable flakes and such.
  nix.settings.experimental-features = ["nix-command" "flakes"];

   # System-wide packages with some examples.
  environment.systemPackages = with pkgs; [
  git
  flatpak
  wget
  ];

  # Install fonts, setup what you want to use. 
  fonts = {
    packages = with pkgs; [
      font-awesome
      iosevka
      nerd-fonts._0xproto
      noto-fonts-emoji
      sarasa-gothic
    ];
    fontconfig = { # The order matters. If you have a language that isn't supported by, say, Iosevka, then will try to use Sarasa, etc.
      defaultFonts = {
        serif = ["Iosevka Extended" "Sarasa Gothic"];
        sansSerif = ["Iosevka Extended" "Sarasa Gothic"];
        monospace = ["Iosevka Extended" "Sarasa Mono"];
      };
    };
  };

  # Install and set the default editor to Neovim.
  programs.neovim = {
    enable = true;
    defaultEditor = true;
  };

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
    pinentryPackage = pkgs.pinentry.curses;
  };

  # Steam setup, also with installation of the Proton-GE package.
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true;
    dedicatedServer.openFirewall = true;
    localNetworkGameTransfers.openFirewall = true;
    extraCompatPackages = with pkgs; [
      proton-ge-bin
    ];
  };

  # Set up xdg-portals for Flatpak:
  xdg.portal = {
    enable = true;
    #wlr.enable = true;
    xdgOpenUsePortal = true;
    extraPortals = with pkgs; [
      xdg-desktop-portal-gtk
    ];
    config = {
      common = {
        default = [
          "gtk"
        ];
      };
    };
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Enable Flatpak:
  services.flatpak.enable = true;
 
  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Enable SysRq.
  boot.kernel.sysctl."kernel.sysrq" = 1; 
 
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  
  system.stateVersion = "24.11"; # Did you read the comment?

  nix.settings = { # CUDA cachix setup, reduces build times.
  substituters = [
    "https://cuda-maintainers.cachix.org"
  ];
  trusted-public-keys = [
    "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E="
  ];
};

  nix.settings.auto-optimise-store = true; # This command creates hard-links between identical files in the nix store.
}

